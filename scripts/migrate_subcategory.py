#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –ø–æ–ª—è subcategory –∑ —Ç–∞–±–ª–∏—Ü—ñ testcases –¥–æ —Ç–∞–±–ª–∏—Ü—ñ checklists.
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–¥–∞–ª—è—î –ø–æ–ª–µ subcategory –∑ testcases —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ checklists.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.data.qa_repository import QARepository
from app.models.qa_models import TestCase, Checklist
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_subcategory():
    """–í–∏–∫–æ–Ω—É—î –º—ñ–≥—Ä–∞—Ü—ñ—é –ø–æ–ª—è subcategory."""
    
    qa_repo = QARepository()
    session = qa_repo.get_session()
    
    try:
        logger.info("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –ø–æ–ª—è subcategory...")
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–æ–ª–µ subcategory –≤ testcases
        logger.info("üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ testcases...")
        result = session.execute(text("SHOW COLUMNS FROM testcases LIKE 'subcategory'"))
        has_subcategory_in_testcases = result.fetchone() is not None
        
        if has_subcategory_in_testcases:
            logger.info("‚úÖ –ü–æ–ª–µ subcategory –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ testcases")
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–æ–ª–µ subcategory –≤ checklists
            logger.info("üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ checklists...")
            result = session.execute(text("SHOW COLUMNS FROM checklists LIKE 'subcategory'"))
            has_subcategory_in_checklists = result.fetchone() is not None
            
            if not has_subcategory_in_checklists:
                logger.info("‚ö†Ô∏è –ü–æ–ª–µ subcategory –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ checklists")
                logger.info("üîß –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ subcategory –¥–æ —Ç–∞–±–ª–∏—Ü—ñ checklists...")
                
                # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ subcategory –¥–æ checklists
                session.execute(text("""
                    ALTER TABLE checklists 
                    ADD COLUMN subcategory VARCHAR(255) NULL 
                    COMMENT 'Subcategory from parent page hierarchy'
                """))
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å
                session.execute(text("""
                    ALTER TABLE checklists 
                    ADD INDEX idx_checklists_subcategory (subcategory)
                """))
                
                logger.info("‚úÖ –ü–æ–ª–µ subcategory –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ checklists")
            
            # 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –¥–∞–Ω—ñ subcategory –∑ testcases –¥–æ checklists
            logger.info("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –¥–∞–Ω—ñ subcategory –∑ testcases –¥–æ checklists...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è subcategory –∑ testcases
            result = session.execute(text("""
                SELECT DISTINCT checklist_id, subcategory 
                FROM testcases 
                WHERE subcategory IS NOT NULL AND subcategory != ''
            """))
            
            migrated_count = 0
            for row in result:
                checklist_id, subcategory = row
                
                # –û–Ω–æ–≤–ª—é—î–º–æ checklist –∑ subcategory
                session.execute(text("""
                    UPDATE checklists 
                    SET subcategory = :subcategory 
                    WHERE id = :checklist_id
                """), {"subcategory": subcategory, "checklist_id": checklist_id})
                
                migrated_count += 1
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_count} –∑–∞–ø–∏—Å—ñ–≤ subcategory")
            
            # 4. –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ subcategory –∑ testcases
            logger.info("üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ subcategory –∑ —Ç–∞–±–ª–∏—Ü—ñ testcases...")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–µ–∫—Å
            session.execute(text("DROP INDEX IF EXISTS idx_testcases_subcategory ON testcases"))
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ
            session.execute(text("ALTER TABLE testcases DROP COLUMN subcategory"))
            
            logger.info("‚úÖ –ü–æ–ª–µ subcategory –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ç–∞–±–ª–∏—Ü—ñ testcases")
            
        else:
            logger.info("‚ÑπÔ∏è –ü–æ–ª–µ subcategory –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ testcases - –º—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ checklists
        result = session.execute(text("SHOW COLUMNS FROM checklists LIKE 'subcategory'"))
        if result.fetchone():
            logger.info("‚úÖ –ü–æ–ª–µ subcategory –ø—Ä–∏—Å—É—Ç–Ω—î –≤ —Ç–∞–±–ª–∏—Ü—ñ checklists")
        else:
            logger.error("‚ùå –ü–æ–ª–µ subcategory –≤—ñ–¥—Å—É—Ç–Ω—î –≤ —Ç–∞–±–ª–∏—Ü—ñ checklists")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ testcases
        result = session.execute(text("SHOW COLUMNS FROM testcases LIKE 'subcategory'"))
        if not result.fetchone():
            logger.info("‚úÖ –ü–æ–ª–µ subcategory –≤—ñ–¥—Å—É—Ç–Ω—î –≤ —Ç–∞–±–ª–∏—Ü—ñ testcases")
        else:
            logger.error("‚ùå –ü–æ–ª–µ subcategory –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—î –≤ —Ç–∞–±–ª–∏—Ü—ñ testcases")
        
        session.commit()
        logger.info("üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        raise
    finally:
        session.close()
        qa_repo.close()

if __name__ == "__main__":
    migrate_subcategory()
