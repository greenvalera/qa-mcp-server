#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É.
"""

import sys
import os
import click
import time
from typing import Dict, Any

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import settings
from app.data.qa_repository import QARepository
from app.ai.embedder import OpenAIEmbedder


class EmbeddingUpdater:
    """–ö–ª–∞—Å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤."""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è."""
        self.qa_repo = QARepository()
        self.embedder = OpenAIEmbedder()
        
    def check_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API."""
        click.echo("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API...")
        
        try:
            # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            test_embedding = self.embedder.embed_text("test connection")
            if test_embedding:
                click.echo("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API —É—Å–ø—ñ—à–Ω–µ")
                return True
            else:
                click.echo("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ embedding –≤—ñ–¥ OpenAI API")
                return False
        except Exception as e:
            click.echo(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API: {e}")
            return False
    
    def get_statistics(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ embeddings."""
        session = self.qa_repo.get_session()
        try:
            from sqlalchemy import func
            from app.models.qa_models import TestCase
            
            total_testcases = session.query(TestCase).count()
            testcases_with_embeddings = session.query(TestCase).filter(
                TestCase.embedding.isnot(None)
            ).count()
            testcases_without_embeddings = total_testcases - testcases_with_embeddings
            
            return {
                'total': total_testcases,
                'with_embeddings': testcases_with_embeddings,
                'without_embeddings': testcases_without_embeddings,
                'percentage': (testcases_with_embeddings / total_testcases * 100) if total_testcases > 0 else 0
            }
        finally:
            session.close()
    
    def update_embeddings(self, batch_size: int = 50, dry_run: bool = False) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª—é—î embeddings –¥–ª—è —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤."""
        click.echo(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings...")
        click.echo(f"üìä –†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É: {batch_size}")
        
        if dry_run:
            click.echo("üîç DRY RUN - –Ω—ñ—á–æ–≥–æ –Ω–µ –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_statistics()
        click.echo(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        click.echo(f"   ‚Ä¢ –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤: {stats['total']}")
        click.echo(f"   ‚Ä¢ –ó embeddings: {stats['with_embeddings']} ({stats['percentage']:.1f}%)")
        click.echo(f"   ‚Ä¢ –ë–µ–∑ embeddings: {stats['without_embeddings']}")
        
        if stats['without_embeddings'] == 0:
            click.echo("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∫–µ–π—Å–∏ –≤–∂–µ –º–∞—é—Ç—å embeddings!")
            return {
                'success': True,
                'message': 'All testcases already have embeddings',
                'total': 0,
                'updated': 0
            }
        
        if dry_run:
            click.echo(f"üîç DRY RUN: –ë—É–ª–æ –± –æ–Ω–æ–≤–ª–µ–Ω–æ {stats['without_embeddings']} —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤")
            return {
                'success': True,
                'message': f'DRY RUN: Would update {stats["without_embeddings"]} testcases',
                'total': stats['without_embeddings'],
                'updated': 0
            }
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if not click.confirm(f"‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {stats['without_embeddings']} —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤?"):
            click.echo("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return {'success': False, 'message': 'Cancelled by user'}
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        start_time = time.time()
        result = self.qa_repo.update_all_embeddings(batch_size=batch_size)
        end_time = time.time()
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if result['success']:
            click.echo("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            click.echo(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            click.echo(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {result['total']}")
            click.echo(f"   ‚Ä¢ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {result['updated']}")
            if result.get('failed', 0) > 0:
                click.echo(f"   ‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {result['failed']}")
            click.echo(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {end_time - start_time:.1f} —Å–µ–∫—É–Ω–¥")
        else:
            click.echo(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {result.get('error', 'Unknown error')}")
        
        return result
    
    def close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è."""
        self.qa_repo.close()


@click.command()
@click.option('--batch-size', '-b', default=50, help='–†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (1-100)')
@click.option('--dry-run', '-d', is_flag=True, help='–¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ, –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏')
@click.option('--stats-only', '-s', is_flag=True, help='–¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
@click.option('--check-connection', '-c', is_flag=True, help='–¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI')
def main(batch_size: int, dry_run: bool, stats_only: bool, check_connection: bool):
    """–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤."""
    
    click.echo("üîß QA Embeddings Updater")
    click.echo("=" * 50)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if batch_size < 1 or batch_size > 100:
        click.echo("‚ùå –ü–æ–º–∏–ª–∫–∞: batch_size –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100")
        sys.exit(1)
    
    updater = EmbeddingUpdater()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if check_connection:
            success = updater.check_connection()
            sys.exit(0 if success else 1)
        
        # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if stats_only:
            stats = updater.get_statistics()
            click.echo("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ embeddings:")
            click.echo(f"   ‚Ä¢ –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤: {stats['total']}")
            click.echo(f"   ‚Ä¢ –ó embeddings: {stats['with_embeddings']} ({stats['percentage']:.1f}%)")
            click.echo(f"   ‚Ä¢ –ë–µ–∑ embeddings: {stats['without_embeddings']}")
            sys.exit(0)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º
        if not updater.check_connection():
            click.echo("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API")
            sys.exit(1)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ embeddings
        result = updater.update_embeddings(batch_size=batch_size, dry_run=dry_run)
        
        if result['success']:
            click.echo("üéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            sys.exit(0)
        else:
            click.echo("üí• –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        click.echo(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
    finally:
        updater.close()


if __name__ == '__main__':
    main()
