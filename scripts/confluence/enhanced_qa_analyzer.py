#!/usr/bin/env python3
"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π QA –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑ –ª–æ–≥—ñ–∫–æ—é –∑ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.
–í–∫–ª—é—á–∞—î —Ä–æ–∑–±–∏–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –±–ª–æ–∫–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥.
"""

import os
import sys
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

# Add app to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from app.ai.qa_analyzer import QAContentAnalyzer, QAAnalysisResult


class EnhancedQAAnalyzer(QAContentAnalyzer):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π QA –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑ –∫—Ä–∞—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º."""
    
    def __init__(self, *args, **kwargs):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è."""
        super().__init__(*args, **kwargs)
    
    def analyze_qa_content_enhanced(self, title: str, content: str) -> QAAnalysisResult:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –Ω–∞ –±–ª–æ–∫–∏."""
        
        # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        initial_analysis = self.analyze_qa_content(title, content)
        
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤, —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥
        if len(initial_analysis.testcases) < 10:
            print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –ª–∏—à–µ {len(initial_analysis.testcases)} —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
            enhanced_testcases = self._enhance_testcase_extraction(content, initial_analysis.testcases)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return QAAnalysisResult(
                section_title=initial_analysis.section_title,
                checklist_title=initial_analysis.checklist_title,
                checklist_description=initial_analysis.checklist_description,
                additional_content=initial_analysis.additional_content,
                feature_name=initial_analysis.feature_name,
                feature_description=initial_analysis.feature_description,
                feature_id=initial_analysis.feature_id,
                testcases=enhanced_testcases,
                configs=initial_analysis.configs,
                analysis_confidence=initial_analysis.analysis_confidence,
                parsing_method="enhanced_llm"
            )
        
        return initial_analysis
    
    def _enhance_testcase_extraction(self, content: str, initial_testcases: List[Dict]) -> List[Dict]:
        """–ü–æ–∫—Ä–∞—â—É—î –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –±—ñ–ª—å—à–µ —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤, —Ä–æ–∑–±–∏–≤—à–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        enhanced_testcases = list(initial_testcases)  # –ö–æ–ø—ñ—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –±–ª–æ–∫–∏
        content_blocks = self._split_content_into_blocks(content)
        
        for i, block in enumerate(content_blocks):
            if len(block.strip()) < 100:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—ñ –±–ª–æ–∫–∏
                continue
            
            try:
                print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –±–ª–æ–∫ {i+1}/{len(content_blocks)}")
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –±–ª–æ–∫ –æ–∫—Ä–µ–º–æ
                block_analysis = self.analyze_qa_content(f"Block {i+1} - {self._get_block_title(block)}", block)
                
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∫–µ–π—Å–∏
                for testcase in block_analysis.testcases:
                    if not self._is_duplicate_testcase(testcase, enhanced_testcases):
                        testcase['order_index'] = len(enhanced_testcases)
                        enhanced_testcases.append(testcase)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–ª–æ–∫—É {i+1}: {e}")
                continue
        
        print(f"‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {len(enhanced_testcases)} —Ç–µ—Å—Ç–∫–µ–π—Å—ñ–≤ (–±—É–ª–æ {len(initial_testcases)})")
        return enhanced_testcases
    
    def _split_content_into_blocks(self, content: str) -> List[str]:
        """–†–æ–∑–¥—ñ–ª—è—î –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –±–ª–æ–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É."""
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
        delimiters = [
            "# GENERAL",
            "# CUSTOM", 
            "Header",
            "View after registration",
            "Search parameters",
            "–ü–æ–∏—Å–∫–æ–≤–∞—è –≤—ã–¥–∞—á–∞",
            "Flirtcast",
            "Widget",
            "Footer Info",
            "CUSTOM",
            "GENERAL",
            "Login",
            "Registration",
            "Profile",
            "Settings",
            "Chat",
            "Payment",
            "Notification",
            "Menu",
            "Navigation"
        ]
        
        blocks = []
        current_block = ""
        
        lines = content.split('\n')
        
        for line in lines:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü–µ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
            is_delimiter = any(delimiter.lower() in line.lower() for delimiter in delimiters)
            
            if is_delimiter and current_block.strip():
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
                blocks.append(current_block.strip())
                current_block = line + '\n'
            else:
                current_block += line + '\n'
        
        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫
        if current_block.strip():
            blocks.append(current_block.strip())
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –±–ª–æ–∫–∏ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º —Ç–∞ —è–∫—ñ—Å—Ç—é
        filtered_blocks = []
        for block in blocks:
            if len(block) > 200 and self._is_quality_block(block):
                filtered_blocks.append(block)
        
        print(f"üìä –†–æ–∑–¥—ñ–ª–µ–Ω–æ –Ω–∞ {len(filtered_blocks)} —è–∫—ñ—Å–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ (–∑ {len(blocks)} –∑–∞–≥–∞–ª–æ–º)")
        return filtered_blocks
    
    def _is_quality_block(self, block: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –±–ª–æ–∫ —è–∫—ñ—Å–Ω–∏–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."""
        
        # –ü–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        quality_keywords = [
            'step', 'expected', 'result', 'test', 'check', 'verify', 
            '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
            '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∫–Ω–æ–ø–∫–∞', '–ø–æ–ª–µ',
            'priority', 'config', 'screenshot'
        ]
        
        block_lower = block.lower()
        keyword_count = sum(1 for keyword in quality_keywords if keyword in block_lower)
        
        # –ü–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        return keyword_count >= 2
    
    def _get_block_title(self, block: str) -> str:
        """–í–∏—Ç—è–≥—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫—É."""
        lines = block.split('\n')
        for line in lines[:3]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ 3 —Ä—è–¥–∫–∏
            line = line.strip()
            if line and not line.startswith('|') and len(line) < 100:
                return line[:50]
        return "Content Block"
    
    def _is_duplicate_testcase(self, testcase: Dict, existing_testcases: List[Dict]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ç–µ—Å—Ç–∫–µ–π—Å –¥—É–±–ª—ñ–∫–∞—Ç–æ–º."""
        
        step = testcase.get('step', '').strip().lower()
        expected = testcase.get('expected_result', '').strip().lower()
        
        if not step and not expected:
            return True
        
        for existing in existing_testcases:
            existing_step = existing.get('step', '').strip().lower()
            existing_expected = existing.get('expected_result', '').strip().lower()
            
            # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–æ—Å—Ç—ñ
            if (step and existing_step and step[:50] == existing_step[:50]) or \
               (expected and existing_expected and expected[:50] == existing_expected[:50]):
                return True
        
        return False
