#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑ –¥–∞–Ω–∏—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Ö–æ—Å—Ç—ñ
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./scripts/init_production_db.sh [backup_archive.tar.gz]

set -e

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BACKUP_DIR="./backups"
RESTORE_DIR="./restore_temp"

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –¥–æ–≤—ñ–¥–∫–∏
show_help() {
    echo -e "${GREEN}üîß QA MCP Server - Production Database Initialization${NC}"
    echo -e "${YELLOW}====================================================${NC}"
    echo ""
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [backup_archive.tar.gz] [options]"
    echo ""
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:"
    echo "  backup_archive.tar.gz  - –®–ª—è—Ö –¥–æ –∞—Ä—Ö—ñ–≤—É –±–µ–∫–∞–ø—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
    echo ""
    echo "–û–ø—Ü—ñ—ó:"
    echo "  --fresh                - –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–∂—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–±–µ–∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è)"
    echo "  --force                - –ü—Ä–∏–º—É—Å–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è"
    echo "  --dry-run              - –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –±–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
    echo "  --help                 - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
    echo ""
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0                                    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –Ω—É–ª—è"
    echo "  $0 backups/qa_backup_20241201.tar.gz # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É"
    echo "  $0 --fresh --force                   # –ü—Ä–∏–º—É—Å–æ–≤–∞ —Å–≤—ñ–∂–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è"
    echo ""
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
check_arguments() {
    BACKUP_ARCHIVE=""
    FRESH_INIT=false
    FORCE_INIT=false
    DRY_RUN=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --fresh)
                FRESH_INIT=true
                shift
                ;;
            --force)
                FORCE_INIT=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *.tar.gz)
                BACKUP_ARCHIVE="$1"
                shift
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏—Ö –æ–ø—Ü—ñ–π
    if [ -n "$BACKUP_ARCHIVE" ] && [ "$FRESH_INIT" = true ]; then
        echo -e "${RED}‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∫–∞–ø —Ç–∞ --fresh –æ–¥–Ω–æ—á–∞—Å–Ω–æ${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
check_system_requirements() {
    echo -e "${YELLOW}üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥...${NC}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!${NC}"
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker Compose
    if ! command -v docker compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!${NC}"
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python 3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!${NC}"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
        echo "–°—Ç–≤–æ—Ä—é—î–º–æ .env –∑ –ø—Ä–∏–∫–ª–∞–¥—É..."
        if [ -f "env.example" ]; then
            cp env.example .env
            echo -e "${GREEN}‚úÖ –§–∞–π–ª .env —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ env.example${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏!${NC}"
        else
            echo -e "${RED}‚ùå –§–∞–π–ª env.example –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
create_directories() {
    echo -e "${YELLOW}üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...${NC}"
    
    mkdir -p backups
    mkdir -p logs
    mkdir -p data/mysql
    mkdir -p data/qdrant
    
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
start_containers() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ docker compose up -d${NC}"
        return 0
    fi
    
    # –ó—É–ø–∏–Ω—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    docker compose down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    docker compose up -d
    
    # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—Å—Ç—è—Ç—å—Å—è
    echo -e "${YELLOW}‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...${NC}"
    sleep 15
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
    if docker compose ps | grep -q "qa_mysql.*Up" && docker compose ps | grep -q "qa_qdrant.*Up"; then
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤!${NC}"
        docker compose logs
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó MySQL
init_mysql() {
    echo -e "${YELLOW}üóÑÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MySQL...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MySQL${NC}"
        return 0
    fi
    
    # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ MySQL –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π
    echo -e "${YELLOW}‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ MySQL...${NC}"
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if docker compose exec mysql mysqladmin ping -h localhost -u root -proot --silent 2>/dev/null; then
            echo -e "${GREEN}‚úÖ MySQL –≥–æ—Ç–æ–≤–∏–π${NC}"
            break
        fi
        
        attempt=$((attempt + 1))
        echo -e "${YELLOW}   –°–ø—Ä–æ–±–∞ $attempt/$max_attempts...${NC}"
        sleep 2
    done
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${RED}‚ùå MySQL –Ω–µ –≥–æ—Ç–æ–≤–∏–π –ø—ñ—Å–ª—è $max_attempts —Å–ø—Ä–æ–±${NC}"
        echo -e "${YELLOW}–õ–æ–≥–∏ MySQL:${NC}"
        docker compose logs mysql --tail 20
        exit 1
    fi
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    if [ -f "scripts/mysql_init.sql" ]; then
        echo -e "${YELLOW}üì• –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Å–∫—Ä–∏–ø—Ç—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...${NC}"
        docker compose exec -T mysql mysql -u root -proot < scripts/mysql_init.sql
    fi
    
    echo -e "${GREEN}‚úÖ MySQL —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Qdrant
init_qdrant() {
    echo -e "${YELLOW}üîç –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Qdrant...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Qdrant${NC}"
        return 0
    fi
    
    # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ Qdrant –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π
    echo -e "${YELLOW}‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Qdrant...${NC}"
    local max_attempts=30
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:6333/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Qdrant –≥–æ—Ç–æ–≤–∏–π${NC}"
            break
        fi
        
        attempt=$((attempt + 1))
        echo -e "${YELLOW}   –°–ø—Ä–æ–±–∞ $attempt/$max_attempts...${NC}"
        sleep 2
    done
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${RED}‚ùå Qdrant –Ω–µ –≥–æ—Ç–æ–≤–∏–π –ø—ñ—Å–ª—è $max_attempts —Å–ø—Ä–æ–±${NC}"
        echo -e "${YELLOW}–õ–æ–≥–∏ Qdrant:${NC}"
        docker compose logs qdrant --tail 20
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Qdrant —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É
restore_from_backup() {
    if [ -z "$BACKUP_ARCHIVE" ]; then
        return 0
    fi
    
    echo -e "${YELLOW}üì¶ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É: $BACKUP_ARCHIVE${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ $BACKUP_ARCHIVE${NC}"
        return 0
    fi
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    ./scripts/restore_database.sh "$BACKUP_ARCHIVE" --force
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
load_test_data() {
    if [ "$FRESH_INIT" = false ] && [ -n "$BACKUP_ARCHIVE" ]; then
        echo -e "${BLUE}‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∫–∞–ø)${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö${NC}"
        return 0
    fi
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    if [ -f "scripts/confluence/unified_loader.py" ]; then
        echo -e "${YELLOW}üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Confluence...${NC}"
        docker compose exec mcp-server python scripts/confluence/unified_loader.py --use-mock-api --use-config
    fi
    
    echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings
update_embeddings() {
    if [ "$FRESH_INIT" = false ] && [ -n "$BACKUP_ARCHIVE" ]; then
        echo -e "${BLUE}‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∫–∞–ø)${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}üß† –û–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings${NC}"
        return 0
    fi
    
    # –û–Ω–æ–≤–ª—é—î–º–æ embeddings
    if [ -f "scripts/update_embeddings.sh" ]; then
        echo -e "${YELLOW}üîÑ –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è embeddings...${NC}"
        ./scripts/update_embeddings.sh
    fi
    
    echo -e "${GREEN}‚úÖ Embeddings –æ–Ω–æ–≤–ª–µ–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
test_system() {
    echo -e "${YELLOW}üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...${NC}"
    
    if [ "$DRY_RUN" = true ]; then
        echo -e "${BLUE}üîç DRY RUN: –ë—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏${NC}"
        return 0
    fi
    
    # –¢–µ—Å—Ç—É—î–º–æ MCP —Å–µ—Ä–≤–µ—Ä
    echo -e "${YELLOW}üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    timeout 10 bash -c 'echo "{\"jsonrpc\": \"2.0\", \"method\": \"tools/list\", \"params\": {}, \"id\": 1}" | python3 mcp_server.py' || {
        echo -e "${YELLOW}‚ö†Ô∏è  MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è stdio —Ä–µ–∂–∏–º—É)${NC}"
    }
    
    # –¢–µ—Å—Ç—É—î–º–æ HTTP API
    echo -e "${YELLOW}üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP API...${NC}"
    if curl -s http://localhost:3000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ HTTP API –ø—Ä–∞—Ü—é—î${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  HTTP API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π (–º–æ–∂–ª–∏–≤–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π)${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_statistics() {
    echo -e "\n${GREEN}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:${NC}"
    echo -e "${YELLOW}–î–∞—Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: $(date)${NC}"
    echo -e "${YELLOW}–†–µ–∂–∏–º: $([ "$FRESH_INIT" = true ] && echo "–°–≤—ñ–∂–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è" || echo "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É")${NC}"
    
    if [ "$DRY_RUN" = false ]; then
        echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:${NC}"
        docker compose ps
        
        echo -e "\n${YELLOW}–†–æ–∑–º—ñ—Ä –±–∞–∑ –¥–∞–Ω–∏—Ö:${NC}"
        echo -e "${YELLOW}MySQL: $(docker compose exec mysql du -sh /var/lib/mysql 2>/dev/null | cut -f1 || echo "N/A")${NC}"
        echo -e "${YELLOW}Qdrant: $(docker compose exec qdrant du -sh /qdrant/storage 2>/dev/null | cut -f1 || echo "N/A")${NC}"
    else
        echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å: Dry run (–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ)${NC}"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
show_next_steps() {
    echo -e "\n${GREEN}üéâ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:${NC}"
    echo -e "${YELLOW}   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: nano .env${NC}"
    echo -e "${YELLOW}   2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å MCP —Å–µ—Ä–≤–µ—Ä: python3 mcp_server.py${NC}"
    echo -e "${YELLOW}   3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Cursor: ~/.cursor/mcp.json${NC}"
    echo -e "${YELLOW}   4. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è${NC}"
    echo ""
    echo -e "${YELLOW}üí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:${NC}"
    echo -e "${YELLOW}   docker compose ps          # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤${NC}"
    echo -e "${YELLOW}   docker compose logs        # –õ–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤${NC}"
    echo -e "${YELLOW}   ./scripts/backup_database.sh # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
main() {
    echo -e "${GREEN}üîß QA MCP Server - Production Database Initialization${NC}"
    echo -e "${YELLOW}====================================================${NC}"
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    check_arguments "$@"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤–∏–º–æ–≥–∏
    check_system_requirements
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –¥—ñ—é
    if [ "$DRY_RUN" = false ] && [ "$FORCE_INIT" = false ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –¶—è –æ–ø–µ—Ä–∞—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Ö–æ—Å—Ç—ñ${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ${NC}"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo -e "${RED}‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ${NC}"
            exit 0
        fi
    fi
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    create_directories
    start_containers
    init_mysql
    init_qdrant
    restore_from_backup
    load_test_data
    update_embeddings
    test_system
    show_statistics
    show_next_steps
}

# –ó–∞–ø—É—Å–∫
main "$@"
