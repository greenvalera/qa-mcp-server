#!/usr/bin/env python3
"""
MCP Local Server - stdio –ø—Ä–æ–∫—Å—ñ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ–≥–æ HTTP API —Å–µ—Ä–≤–µ—Ä–∞
–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø—ñ—Å–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É:
- app/http_api.py: HTTP FastAPI —Å–µ—Ä–≤–µ—Ä –∑ JSON-RPC endpoints
- app/mcp_tools.py: –ß–∏—Å—Ç—ñ QA —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–æ—é (–±–µ–∑ MCP –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤)
- app/mcp_server.py: FastMCP —Å–µ—Ä–≤–µ—Ä –∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ (–¥–ª—è –ø—Ä—è–º–æ–≥–æ stdio)
- mcp_local.py: –ü—Ä–æ–∫—Å—ñ –º—ñ–∂ Cursor —ñ HTTP API (—Ü–µ–π —Ñ–∞–π–ª)
"""

import json
import sys
import urllib.request
import urllib.parse
from typing import Dict, Any, List


# –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è Cursor (–∑—Ä–æ–∑—É–º—ñ–ª—ñ –Ω–∞–∑–≤–∏)
TOOLS = [
    {
        "name": "qa_search_documents",
        "description": "üîç Search in DOCUMENTATION and knowledge base - finds relevant docs, guides, and information chunks",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {"type": "string", "description": "Search query for documentation"},
                "top_k": {"type": "integer", "default": 10, "description": "Number of documents to return"},
                "feature_names": {"type": "array", "items": {"type": "string"}, "description": "Filter by feature names"},
                "space_keys": {"type": "array", "items": {"type": "string"}, "description": "Filter by Confluence space keys"},
                "return_chunks": {"type": "boolean", "default": True, "description": "Whether to return chunk information"}
            },
            "required": ["query"]
        }
    },
    {
        "name": "qa_search_testcases",
        "description": "üß™ Search in TEST CASES using AI - finds specific tests by semantic similarity (step, expected_result)",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {"type": "string", "description": "Search query for test cases"},
                "limit": {"type": "integer", "default": 10, "description": "Maximum number of test cases"},
                "min_similarity": {"type": "number", "default": 0.5, "description": "Minimum similarity (0.0-1.0)"},
                "section_id": {"type": "integer", "description": "Filter by section ID"},
                "checklist_id": {"type": "integer", "description": "Filter by checklist ID"},
                "test_group": {"type": "string", "description": "Filter by test group (GENERAL or CUSTOM)"},
                "priority": {"type": "string", "description": "Filter by priority"}
            },
            "required": ["query"]
        }
    },
    {
        "name": "qa_search_testcases_text",
        "description": "üìù Search test cases by TEXT - simple text search in step and expected_result fields",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {"type": "string", "description": "Text search query"},
                "section_id": {"type": "integer", "description": "Section ID to filter by"},
                "checklist_id": {"type": "integer", "description": "Checklist ID to filter by"},
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of results"}
            },
            "required": ["query"]
        }
    },
    {
        "name": "qa_list_features",
        "description": "List all features with descriptions",
        "inputSchema": {
            "type": "object",
            "properties": {
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of features"},
                "offset": {"type": "integer", "default": 0, "description": "Number of features to skip"}
            }
        }
    },
    {
        "name": "qa_docs_by_feature",
        "description": "Get documents for a specific feature",
        "inputSchema": {
            "type": "object",
            "properties": {
                "feature_name": {"type": "string", "description": "Feature name"},
                "limit": {"type": "integer", "default": 50, "description": "Maximum number of documents"}
            }
        }
    },
    {
        "name": "qa_health",
        "description": "Check system health",
        "inputSchema": {"type": "object", "properties": {}}
    },
    {
        "name": "qa_get_sections",
        "description": "Get list of QA sections (Checklist WEB, Checklist MOB, etc.)",
        "inputSchema": {
            "type": "object",
            "properties": {
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of sections"},
                "offset": {"type": "integer", "default": 0, "description": "Number of sections to skip"}
            }
        }
    },
    {
        "name": "qa_get_checklists",
        "description": "Get list of checklists, optionally filtered by section",
        "inputSchema": {
            "type": "object",
            "properties": {
                "section_id": {"type": "integer", "description": "Section ID to filter by"},
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of checklists"},
                "offset": {"type": "integer", "default": 0, "description": "Number of checklists to skip"}
            }
        }
    },
    {
        "name": "qa_get_testcases",
        "description": "Get list of test cases with filters",
        "inputSchema": {
            "type": "object",
            "properties": {
                "checklist_id": {"type": "integer", "description": "Checklist ID to filter by"},
                "test_group": {"type": "string", "description": "Test group (GENERAL or CUSTOM)"},
                "functionality": {"type": "string", "description": "Functionality to filter by"},
                "priority": {"type": "string", "description": "Priority (LOW, MEDIUM, HIGH, CRITICAL)"},
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of test cases"},
                "offset": {"type": "integer", "default": 0, "description": "Number of test cases to skip"}
            }
        }
    },
    {
        "name": "qa_search_testcases",
        "description": "Search test cases by text in step or expected_result",
        "inputSchema": {
            "type": "object",
            "properties": {
                "query": {"type": "string", "description": "Search query"},
                "section_id": {"type": "integer", "description": "Section ID to filter by"},
                "checklist_id": {"type": "integer", "description": "Checklist ID to filter by"},
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of results"}
            },
            "required": ["query"]
        }
    },
    {
        "name": "qa_get_configs",
        "description": "Get list of configurations",
        "inputSchema": {
            "type": "object",
            "properties": {
                "limit": {"type": "integer", "default": 100, "description": "Maximum number of configs"},
                "offset": {"type": "integer", "default": 0, "description": "Number of configs to skip"}
            }
        }
    },
    {
        "name": "qa_get_statistics",
        "description": "Get QA structure statistics",
        "inputSchema": {"type": "object", "properties": {}}
    },
    {
        "name": "qa_get_full_structure",
        "description": "Get full QA structure with hierarchy of sections, checklists and test cases",
        "inputSchema": {"type": "object", "properties": {}}
    },
]


def call_docker_server(method: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """–í–∏–∫–ª–∏–∫–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ JSON-RPC"""
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ qa_xxx –≤ qa.xxx –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
    if method.startswith("qa_"):
        docker_method = method.replace("qa_", "qa.", 1)
    else:
        docker_method = method
    
    payload = {
        "jsonrpc": "2.0",
        "method": docker_method,
        "params": params,
        "id": 1
    }
    
    try:
        req = urllib.request.Request(
            "http://localhost:3000/jsonrpc",
            data=json.dumps(payload).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            
        if "error" in result and result["error"] is not None:
            return {"error": f"Docker server error: {result['error']}", "success": False}
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–±–æ –ø—É—Å—Ç–∏–π dict —è–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None
        return result.get("result") or {}
        
    except Exception as e:
        return {"error": f"Failed to call Docker server: {str(e)}", "success": False}


def handle_request(request: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–æ–±–ª—è—î MCP –∑–∞–ø–∏—Ç–∏"""
    method = request.get("method")
    params = request.get("params", {})
    request_id = request.get("id")

    if method == "initialize":
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "result": {
                "protocolVersion": "2024-11-05",
                "capabilities": {
                    "tools": {}
                },
                "serverInfo": {
                    "name": "qa-search",
                    "version": "1.0.0"
                }
            }
        }

    elif method == "tools/list":
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "result": {
                "tools": TOOLS
            }
        }

    elif method == "tools/call":
        tool_name = params.get("name")
        tool_args = params.get("arguments", {})
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π HTTP —Å–µ—Ä–≤–µ—Ä
        result = call_docker_server(tool_name, tool_args)
        
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "result": {
                "content": [
                    {
                        "type": "text",
                        "text": json.dumps(result, ensure_ascii=False)
                    }
                ]
            }
        }

    elif method == "ping":
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "result": {}
        }

    elif method == "notifications/initialized":
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "result": {}
        }

    else:
        return {
            "jsonrpc": "2.0",
            "id": request_id,
            "error": {
                "code": -32601,
                "message": f"Method not found: {method}"
            }
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è stdio MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("MCP Local Server ready", file=sys.stderr)
    
    for line in sys.stdin:
        line = line.strip()
        if not line:
            continue
            
        try:
            request = json.loads(line)
            response = handle_request(request)
            print(json.dumps(response, ensure_ascii=False))
            sys.stdout.flush()
        except json.JSONDecodeError as e:
            error_response = {
                "jsonrpc": "2.0",
                "id": None,
                "error": {
                    "code": -32700,
                    "message": f"Parse error: {str(e)}"
                }
            }
            print(json.dumps(error_response))
            sys.stdout.flush()
        except Exception as e:
            error_response = {
                "jsonrpc": "2.0",
                "id": None,
                "error": {
                    "code": -32603,
                    "message": f"Internal error: {str(e)}"
                }
            }
            print(json.dumps(error_response))
            sys.stdout.flush()


if __name__ == "__main__":
    main()
