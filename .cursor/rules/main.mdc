---
alwaysApply: true
---
run:
  description: "Run any script through venv and python3"
  shell: |
    cd /home/vpogorelov/projects/qa_mcp && source venv/bin/activate && python3 {{script}} {{args}}

---
alwaysApply: true
---
solid:
  description: "Код має відповідати принципам SOLID"
  principles:
    - "Single Responsibility Principle (SRP): Кожен клас має мати лише одну причину для зміни"
    - "Open/Closed Principle (OCP): Класи мають бути відкритими для розширення, але закритими для модифікації"
    - "Liskov Substitution Principle (LSP): Об'єкти базового класу мають бути замінними об'єктами похідних класів"
    - "Interface Segregation Principle (ISP): Клієнти не повинні залежати від інтерфейсів, які вони не використовують"
    - "Dependency Inversion Principle (DIP): Модулі високого рівня не повинні залежати від модулів низького рівня"
  guidelines:
    - "Використовувати абстракції замість конкретних реалізацій"
    - "Розділяти відповідальність між різними класами та модулями"
    - "Застосовувати dependency injection для слабкого зв'язування"
    - "Створювати інтерфейси для груп пов'язаних методів"
    - "Уникати god objects та дублювання коду"

alwaysApply: true
---
file_naming:
  description: "Модифікувати існуючу логіку замість створення нових файлів з абстрактними назвами"
  rules:
    - "Завжди модифікувати існуючі файли замість створення нових з назвами типу 'enhanced', 'new', 'improved'"
    - "Якщо створення нового файлу необхідне, називати його згідно з функціональністю, а не абстрактним покращенням"
    - "Використовувати описові назви файлів, що відображають їх призначення"
  examples:
    - "Замість 'enhanced_parser.py' → 'html_table_parser.py'"
    - "Замість 'new_analyzer.py' → 'qa_analyzer.py'"
    - "Замість 'improved_loader.py' → 'confluence_data_loader.py'"
  guidelines:
    - "Спочатку спробувати розширити існуючий файл"
    - "Якщо файл стає занадто великим, розділити його за функціональністю"
    - "Назви файлів мають бути зрозумілими для інших розробників"
    - "Уникати загальних термінів як 'enhanced', 'new', 'improved', 'better'"

---
alwaysApply: true
---
after:
  description: "Після кожної модифікації логіки парсингу чеклістів необхідно тестувати її згідно алгоритму, описаного в @CONFLUENCE_HTML_PARSING_RULES.md"
  steps:
    - "Ознайомитись з актуальними правилами парсингу у файлі docs/CONFLUENCE_HTML_PARSING_RULES.md"
    - "Запустити відповідні тести для перевірки коректності парсингу чеклістів"
    - "Переконатись, що результати відповідають очікуваній структурі та правилам з документа"

---


